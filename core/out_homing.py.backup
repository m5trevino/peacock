
from format_instruction import add_format_instruction_to_prompt
def log_mega_prompt(session_timestamp, mega_prompt, user_input, command):
    """Log the assembled mega prompt for debugging"""
    import os
    import datetime
    
    # Ensure logs directory exists
    logs_dir = "/home/flintx/peacock/core/logs"
    os.makedirs(logs_dir, exist_ok=True)
    
    # Write mega prompt log
    mega_log_path = f"{logs_dir}/megapromptlog-{session_timestamp}.txt"
    
    with open(mega_log_path, "w") as f:
        f.write(f"[{datetime.datetime.now().isoformat()}] ASSEMBLED MEGA PROMPT\n")
        f.write(f"Session: {session_timestamp}\n")
        f.write(f"Command: {command}\n") 
        f.write(f"Input: {user_input}\n")
        f.write("=" * 60 + "\n")
        f.write("MEGA PROMPT CONTENT:\n")
        f.write("=" * 60 + "\n")
        f.write(mega_prompt)
        f.write("\n" + "=" * 60 + "\n")
    
    print(f"‚úÖ Mega prompt logged: {mega_log_path}")
    return mega_log_path

def log_final_response(session_timestamp, final_response, model_used):
    """Log the final LLM response for debugging"""
    import os
    import datetime
    
    # Ensure logs directory exists  
    logs_dir = "/home/flintx/peacock/core/logs"
    os.makedirs(logs_dir, exist_ok=True)
    
    # Write final response log
    final_log_path = f"{logs_dir}/finalresponselog-{session_timestamp}.txt"
    
    with open(final_log_path, "w") as f:
        f.write(f"[{datetime.datetime.now().isoformat()}] FINAL GROQ RESPONSE\n")
        f.write(f"Session: {session_timestamp}\n")
        f.write(f"Model: {model_used}\n")
        f.write("=" * 60 + "\n")
        f.write("FINAL RESPONSE CONTENT:\n")
        f.write("=" * 60 + "\n")
        f.write(final_response)
        f.write("\n" + "=" * 60 + "\n")
    
    print(f"‚úÖ Final response logged: {final_log_path}")
    return final_log_path

    def _assemble_mega_prompt(self, user_request: str, bird_results: Dict[str, Any]) -> str:
        """Assemble mega prompt from all 4 bird outputs"""
        
        # Get individual bird responses
        spark_response = bird_results.get("spark", {}).get("response", "")
        falcon_response = bird_results.get("falcon", {}).get("response", "")  
        eagle_response = bird_results.get("eagle", {}).get("response", "")
        hawk_response = bird_results.get("hawk", {}).get("response", "")
        
        # Assemble the mega prompt
        mega_prompt = f"""
COMPREHENSIVE PROJECT GENERATION REQUEST

ORIGINAL USER REQUEST: {user_request}

REQUIREMENTS ANALYSIS (SPARK):
{spark_response}

TECHNICAL ARCHITECTURE (FALCON):
{falcon_response}

IMPLEMENTATION DETAILS (EAGLE):
{eagle_response}

QUALITY ASSURANCE STRATEGY (HAWK):
{hawk_response}

FINAL INSTRUCTION:
Based on the above comprehensive analysis, generate COMPLETE, EXECUTABLE CODE FILES for "{user_request}".

CRITICAL OUTPUT FORMAT - YOU MUST RETURN EXACTLY THIS:

```filename: index.html
<!DOCTYPE html>
<html>
<head>
    <title>{user_request}</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    [COMPLETE HTML IMPLEMENTATION]
    <script src="script.js"></script>
</body>
</html>
```

```filename: style.css
[COMPLETE CSS STYLING FOR THE APPLICATION]
```

```filename: script.js
[COMPLETE JAVASCRIPT IMPLEMENTATION WITH ALL FUNCTIONS]
```

CRITICAL REQUIREMENTS:
- Return ONLY the code files in the exact format above
- NO documentation, explanations, or QA procedures
- All code must be complete and functional
- Include ALL necessary functions and styling
- Make it a fully working application

DO NOT RETURN ANYTHING EXCEPT THE CODE FILES.
"""
        
        return mega_prompt

    def _generate_final_code_with_mega_prompt(self, mega_prompt: str) -> Dict[str, Any]:
        """Send mega prompt to Groq and get final code generation"""
        
        print("üéØ ASSEMBLING MEGA PROMPT AND GENERATING FINAL CODE...")
        
        # Log the mega prompt
        self._log_mega_prompt(mega_prompt)
        
        try:
            # Select API key and model for final generation
            api_key = random.choice(GROQ_API_KEYS)
            model = STAGE_MODEL_ASSIGNMENTS["final"]
            
            # Initialize Groq client
            from groq import Groq
            client = Groq(api_key=api_key)
            
            print(f"üîó FINAL CODE GENERATION API call (model: {model})")
            
            # Make the final API call with mega prompt
            response = client.chat.completions.create(
                messages=[
                    {
                        "role": "user",
                        "content": mega_prompt
                    }
                ],
                model=model,
                max_tokens=4000,
                temperature=0.3
            )
            
            final_response = response.choices[0].message.content
            
            # Log the final response
            self._log_final_response(final_response, model)
            
            print(f"‚úÖ FINAL CODE GENERATION Success - {len(final_response)} chars - Model: {model}")
            
            return {
                "success": True,
                "final_code": final_response,
                "model_used": model,
                "characters": len(final_response)
            }
            
        except Exception as e:
            print(f"‚ùå FINAL CODE GENERATION failed: {e}")
            return {
                "success": False,
                "error": str(e),
                "final_code": ""
            }

    def _log_mega_prompt(self, mega_prompt: str):
        """Log the assembled mega prompt"""
        import os
        
        # Ensure logs directory exists
        logs_dir = "/home/flintx/peacock/core/logs"
        os.makedirs(logs_dir, exist_ok=True)
        
        # Write mega prompt log
        mega_log_path = f"{logs_dir}/megapromptlog-{self.session_timestamp}.txt"
        
        with open(mega_log_path, "w") as f:
            f.write(f"[{datetime.datetime.now().isoformat()}] ASSEMBLED MEGA PROMPT\n")
            f.write(f"Session: {self.session_timestamp}\n")
            f.write("=" * 60 + "\n")
            f.write("MEGA PROMPT CONTENT:\n")
            f.write("=" * 60 + "\n")
            f.write(mega_prompt)
            f.write("\n" + "=" * 60 + "\n")
        
        print(f"‚úÖ Mega prompt logged: {mega_log_path}")

    def _log_final_response(self, final_response: str, model_used: str):
        """Log the final code generation response"""
        import os
        
        # Ensure logs directory exists
        logs_dir = "/home/flintx/peacock/core/logs"
        os.makedirs(logs_dir, exist_ok=True)
        
        # Write final response log
        final_log_path = f"{logs_dir}/finalresponselog-{self.session_timestamp}.txt"
        
        with open(final_log_path, "w") as f:
            f.write(f"[{datetime.datetime.now().isoformat()}] FINAL CODE GENERATION RESPONSE\n")
            f.write(f"Session: {self.session_timestamp}\n")
            f.write(f"Model: {model_used}\n")
            f.write("=" * 60 + "\n")
            f.write("FINAL CODE RESPONSE:\n")
            f.write("=" * 60 + "\n")
            f.write(final_response)
            f.write("\n" + "=" * 60 + "\n")
        
        print(f"‚úÖ Final response logged: {final_log_path}")

def create_homing_orchestrator():
    return OutHomingOrchestrator()

